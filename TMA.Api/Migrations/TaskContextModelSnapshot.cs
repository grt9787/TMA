// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TMA.Api;

#nullable disable

namespace TMA.Api.Migrations
{
    [DbContext(typeof(TaskContext))]
    partial class TaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TMA.Api.Model.Actions", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"), 1L, 1);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            ActionId = 1,
                            ActionName = "Create",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4699)
                        },
                        new
                        {
                            ActionId = 2,
                            ActionName = "Edit",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4702)
                        },
                        new
                        {
                            ActionId = 3,
                            ActionName = "Delete",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4704)
                        },
                        new
                        {
                            ActionId = 4,
                            ActionName = "View",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4706)
                        });
                });

            modelBuilder.Entity("TMA.Api.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4651),
                            IsDeleted = false,
                            Name = "Admin",
                            RoleDescription = "Administrator with full access"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4667),
                            IsDeleted = false,
                            Name = "Manager",
                            RoleDescription = "Manager with limited management rights"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4669),
                            IsDeleted = false,
                            Name = "User",
                            RoleDescription = "Standard user with read-only access"
                        });
                });

            modelBuilder.Entity("TMA.Api.Model.RoleAction", b =>
                {
                    b.Property<int>("RoleActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleActionId"), 1L, 1);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasFullAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("HasReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleActions");

                    b.HasData(
                        new
                        {
                            RoleActionId = 1,
                            ActionId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4733),
                            HasFullAccess = true,
                            HasReadOnly = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleActionId = 2,
                            ActionId = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4736),
                            HasFullAccess = true,
                            HasReadOnly = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleActionId = 3,
                            ActionId = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4738),
                            HasFullAccess = true,
                            HasReadOnly = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleActionId = 4,
                            ActionId = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4740),
                            HasFullAccess = true,
                            HasReadOnly = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleActionId = 5,
                            ActionId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4742),
                            HasFullAccess = false,
                            HasReadOnly = false,
                            RoleId = 2
                        },
                        new
                        {
                            RoleActionId = 6,
                            ActionId = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4744),
                            HasFullAccess = false,
                            HasReadOnly = false,
                            RoleId = 2
                        },
                        new
                        {
                            RoleActionId = 7,
                            ActionId = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4746),
                            HasFullAccess = false,
                            HasReadOnly = true,
                            RoleId = 2
                        },
                        new
                        {
                            RoleActionId = 8,
                            ActionId = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 11, 18, 15, 0, 4, 858, DateTimeKind.Local).AddTicks(4748),
                            HasFullAccess = false,
                            HasReadOnly = true,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("TMA.Api.Model.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TMA.Api.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserStatusId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Admin St",
                            City = "Admin City",
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 11, 18, 9, 30, 4, 858, DateTimeKind.Utc).AddTicks(4287),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "User",
                            Password = "Admin@123",
                            PhoneNumber = "123-456-7890",
                            UserStatusId = 1
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Manager Ave",
                            City = "Manager City",
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 11, 18, 9, 30, 4, 858, DateTimeKind.Utc).AddTicks(4294),
                            Email = "manager@example.com",
                            FirstName = "Manager",
                            IsDeleted = false,
                            LastName = "User",
                            Password = "Manager@123",
                            PhoneNumber = "987-654-3210",
                            UserStatusId = 1
                        },
                        new
                        {
                            UserId = 3,
                            Address = "789 User Blvd",
                            City = "User City",
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 11, 18, 9, 30, 4, 858, DateTimeKind.Utc).AddTicks(4297),
                            Email = "user@example.com",
                            FirstName = "Regular",
                            IsDeleted = false,
                            LastName = "User",
                            Password = "User@123",
                            PhoneNumber = "555-555-5555",
                            UserStatusId = 1
                        });
                });

            modelBuilder.Entity("TMA.Api.Model.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 11, 18, 9, 30, 4, 858, DateTimeKind.Utc).AddTicks(4616),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 11, 18, 9, 30, 4, 858, DateTimeKind.Utc).AddTicks(4619),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            CreatedBy = "system",
                            CreatedDate = new DateTime(2024, 11, 18, 9, 30, 4, 858, DateTimeKind.Utc).AddTicks(4620),
                            RoleId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TMA.Api.Model.RoleAction", b =>
                {
                    b.HasOne("TMA.Api.Model.Actions", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMA.Api.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TMA.Api.Model.UserRole", b =>
                {
                    b.HasOne("TMA.Api.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMA.Api.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
